/**
 * Packages
 *
 * '$' is an object generated by the devDependencies in package.json. If needed,
 * console.log($) can be used to check $'s so long as 'lazy: false' is set.
 */

var gulp =  require('gulp');
var $ =     require('gulp-load-plugins')({
                pattern: '*',
                replaceString: /\bgulp[\-.]/
            });





/**
 * ASSET PATHS
 *
 * Object that contains paths for all asset types. Useful for changing build
 * environments.
 */
var NAMESPACE = 'christinehipp'
var PATH = {
    css:   './css/',
    js:    './js/',
    img:   './img/',
    fonts: './fonts/',
    dist:  './dist/'
};





/**
 * Browsersync (http://www.browsersync.io/docs/api/)
 */

gulp.task('browser-sync', function () {

    $.browserSync({
        proxy: 'localhost/' + NAMESPACE,
        notify: false,
        ui: {
            weinre: {
                port: 9090
            }
        }
    });

});





/**
 * SCSS Linting
 */

gulp.task('scss-lint', function () {

    gulp.src(PATH.css + '**/*.scss')
        .pipe($.plumber())
        .pipe($.scssLint({
            'config': './.scss-lint.yml'
        }))

});


/**
 * Compile SCSS, auto-prefix, and minify in one step, for clean sourcemaps.
 */

gulp.task('css', ['scss-lint'], function () {

    return gulp.src(PATH.css + '**/*.scss')
        .pipe($.plumber())
        .pipe($.sourcemaps.init())
            .pipe($.sass().on('error', function(err) {
                console.error(err.message);
                $.browserSync.notify(err.message, 3000); // Display error in the browser.
                this.emit('end'); // Prevent gulp from catching the error and exiting watch process.
            }))

// Inline images as base64 into the css
//          .pipe($.inlineBase64({
//              baseDir: PATH.css,
//              maxSize: 1024 * 12, // 12kb
//              debug: false // Debug output in the console
//          }))

            .pipe($.autoprefixer({
                browsers: ['last 2 versions', 'ie 8']
            }))
            .pipe($.cleanCss({
                compatibility: 'ie8',
                'mediaMerging': false
            }))
        .pipe($.sourcemaps.write("."))
        .pipe(gulp.dest(PATH.css))
        .pipe($.browserSync.stream());
});




/**
 * Lint the main js file. jshint-stylish provides nice output
 * JavaScript Code Style (http://jscs.info/rules.html)
 */

gulp.task('lint', function () {

    return gulp.src([
            PATH.js + 'main.babel.js'
        ])
        .pipe($.plumber())
        .pipe($.jscs())
        .pipe($.jscs.reporter())
        .pipe($.jshint())
        .pipe($.jshint.reporter('jshint-stylish'));

});


gulp.task('babel', ['lint'], function () {

    return gulp.src(PATH.js + '**/*.babel.js')
        .pipe($.plumber())
        .pipe($.babel({
            presets: [
                'es2015'
            ]
        }))
        .pipe($.rename(function (path) {
            path.basename = path.basename.replace('.babel', '');
        }))
        .pipe(gulp.dest(PATH.dist));

});


/**
 * Build Production.min.js
 */

gulp.task('js', ['babel'], function (){

    return gulp.src([
            PATH.dist + 'main.js'
        ])
        .pipe($.plumber())
        .pipe($.concat('production.min.js'))
        .pipe($.uglify())
        .pipe(gulp.dest(PATH.dist))
        .pipe($.browserSync.reload({
            stream: true
        }));

});





/**
 * Sassdoc
 */

gulp.task('sassdoc', function () {

    return gulp.src(PATH.css + '**/*.scss')
        .pipe($.sassdoc());

});





/**
 * Watch for changes
 */

gulp.task('watch', ['default', 'browser-sync'], function () {

    $.watch(PATH.css + '**/*.scss', function () {
        gulp.start('css');
    });

    $.watch(PATH.js + '*.js', function () {
        gulp.start('js');
    });

    $.watch('*.html', function () {
        gulp.src('*.html')
            .pipe($.browserSync.reload({
                stream: true
            }));
    });

    // Stop old gulp watch when gulpfile is modified.
    // https://gist.github.com/pornel/ca9631f5348383b61bc7b359e96ced38
    $.watch("gulpfile.js").on("change", () => process.exit(0));
});




/**
 * Default
 */

gulp.task('default', ['css', 'js']);
